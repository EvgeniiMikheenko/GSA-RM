/**
  ******************************************************************************
  * File Name          : main.c
  * Description        : Main program body
  ******************************************************************************
  *
  * COPYRIGHT(c) 2016 STMicroelectronics
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
/* Includes ------------------------------------------------------------------*/
#include "stm32f1xx_hal.h"
#include "adc.h"
#include "spi.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"
#include "stm32f1xx_it.h"
/* USER CODE BEGIN Includes */

#include <stdbool.h>

/* USER CODE END Includes */



/* USER CODE BEGIN PV */

#define GSA_ON		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);				//GPIO_BIT_SET
#define GSA_OFF		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);				//GPIO_BIT_RESET

#define BEEP_ON		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
#define BEEP_OFF	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);


#define FILTER_DEGREE		5
#define FILTER_A				0.25
#define	FILTER_B				1-FILTER_A



/////////		ANA I?I EA?OEIEE

#define		GPIO_BIT_SET		1
#define		GPIO_BIT_RESET	0

#define		DISP_DATA			1
#define		DISP_COMMAND	0

#define DISP_ON		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_BIT_SET);
#define DISP_OFF	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_BIT_SET);

#define DISP_RESET_ON			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_BIT_SET);
#define DISP_RESET_OFF		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_BIT_RESET);

#define	DISP_RD_ON				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_BIT_SET);
#define	DISP_RD_OFF				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_BIT_RESET);

#define	DISP_WR_ON				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_BIT_SET);
#define	DISP_WR_OFF				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_BIT_RESET);


#define	DISP_A0_ON				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_BIT_SET);
#define DISP_A0_OFF				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_BIT_RESET);


#define	DISP_CS_ON				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_BIT_SET);
#define DISP_CS_OFF				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_BIT_RESET);



			
#define		DISP_D(a, p)				HAL_GPIO_WritePin(GPIOC, (1 << a), p);			//GPIO_PIN_##a


	



void Disp_Set( void );
void Disp_Init( void );
void Disp_Write( uint8_t pixel );
void Disp_Clr_Port( void );
void Disp_DeInit( void );
void Write( uint8_t type, uint8_t data);
void Disp_Brt( uint16_t brt );



uint16_t tmp_brt = 0x7fff;


///////////////////////////////// democode

#define USE_DEMO			1



#ifdef 	USE_DEMO

#define MAX_COL		240
#define MAX_ROW		64


uint32_t iu= 0;

unsigned char code_pic[MAX_ROW][MAX_COL/8];

void write_dat(unsigned char dat);
void write_cmd(unsigned char cmd);
void Full_on(void);
void Clear(void);
void Horizontal_line(void);
void Vertical_line(void);
void Show_Graph(unsigned char arr[][MAX_COL/8]);
void TransferData(unsigned long dat);
void LCD_initial(void);
void stp_sc(void);



void put_pixel( uint8_t px, uint8_t py, uint8_t state);
void pic_buf_clr( void );
void draw_char( uint8_t char_x, uint8_t char_y, uint8_t simbol, uint8_t polarity);



#endif

/////////////////////////////////	democode



//////////	ANA I?I EA?OEIEE


enum {

	ON,
	OFF,
	FREE

} button;



uint8_t button1;
uint32_t tickcounter;
int button1_state = OFF;


uint32_t Battery_V = 0;







/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/


bool Check_Button1( void );
void Vbat_Filter( uint32_t v_bat );

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{ 
  /* USER CODE BEGIN 1 */
	
//	HAL_NVIC_EnableIRQ( SysTick_IRQn );
	//SystemClock_Config();
	
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* Configure the system clock */
  SystemClock_Config();

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_ADC1_Init();
  MX_SPI2_Init();
  MX_TIM1_Init();
  MX_TIM3_Init();
  MX_TIM16_Init();
  MX_TIM17_Init();
  MX_USART1_UART_Init();
  MX_USART3_UART_Init();

  /* USER CODE BEGIN 2 */
	
	uint8_t adcenablestatus =  ADC_Enable( &hadc1 );

	
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	
	

	
	
	
	
	__enable_irq();
	
	//Disp_Set();
	
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
	//Disp_Init();
	//NVIC_EnableIRQ(ADC1_IRQn);

	DISP_ON;
	HAL_Delay(500);
	
	#ifdef USE_DEMO
		LCD_initial();
	#endif
	
	//Write( DISP_DATA, 0x23);
  while (1)
  {
		uint8_t ggg = 0x23;
			#ifdef USE_DEMO
//		
//					Full_on();
//					HAL_Delay(0x3E8);			//Delay_ms(1000);
		//			Horizontal_line();
//					HAL_Delay(0x3E8);			//Delay_ms(1000);
		//			Vertical_line();
//					HAL_Delay(0x3E8);			//Delay_ms(1000);
					Show_Graph(code_pic);
					HAL_Delay(0x3E8);			//Delay_ms(1000);

//						Full_on();
//						HAL_Delay(0x3E8);
//						Clear();
		pic_buf_clr();
		
		put_pixel(iu % 240, iu / 240, 1);
		iu > 0x3840 ? iu = 0: iu++;	
						
		
			
		
			#endif

		ggg > 0xf0 ? ggg= 0 : ggg++;
		


  }

}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
	
	SystemCoreClockUpdate();
}

/* USER CODE BEGIN 4 */


bool Check_Button1( void )
{

		if( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
			return true;
		else
			return false;

};


//void SysTick_Handler( void )
//{

//	
//	HAL_IncTick();
//  HAL_SYSTICK_IRQHandler();
//	
//	tickcounter++;
//	uint32_t adcstat;
//			
//			
//	Vbat_Filter( HAL_ADC_GetValue( &hadc1) );
//	
//	
//	adcstat = HAL_ADC_Start( &hadc1 );
//	
//	
//	if(tickcounter % 100 == 0)
//	{
//		button1 = button1 << 1;
//	
//		if( !Check_Button1() )
//			button1 |= 1;
//		
//		if( tickcounter % 200 == 0)
//		{
//			
//			
//			BEEP_ON;
//		}
//		else
//		{
//			BEEP_OFF;
//		}
//		

//		
//		
//	}
//	
//	
//	if( button1 == 0xFF && button1_state == OFF)
//	{
//	//	GSA_ON;
//		button1_state = ON;
//		button1 = 0;
//		
//	};
//	
//	
//	if(	button1 == 0xFF && button1_state == ON)
//	{
//	//	GSA_OFF;
//		button1_state = OFF;
//		button1= 0;
//	}
//	
//};





void ADC1_IRQHandler( void )
{
	uint32_t adcval;
	adcval = HAL_ADC_GetValue( &hadc1);
	
};

void  Vbat_Filter( uint32_t v_bat )
{
		 
	
		Battery_V = (FILTER_A * Battery_V + FILTER_B * v_bat) / (1 << FILTER_DEGREE);

};




void Disp_Set( void )
{

	DISP_ON;
	DISP_CS_ON;
//	DISP_RD_OFF;
//	DISP_WR_ON;
	DISP_RESET_OFF;
	
};


void Disp_Init( void )
{
//	DISP_ON;
//	DISP_CS_ON;
////	DISP_RD_OFF;
////	DISP_WR_ON;
//	DISP_RESET_OFF;
	
	HAL_Delay( 0x78 );
	Write(DISP_COMMAND, 0xD7);
	Write(DISP_DATA, 0x9F);
	Write(DISP_COMMAND, 0xE0);
	Write(DISP_DATA, 0x00); 
	HAL_Delay(0xA); 
	Write(DISP_COMMAND, 0xE3); 
	HAL_Delay(0x14); 
	Write(DISP_COMMAND, 0xE1); 
	Write(DISP_COMMAND, 0x11); 
	Write(DISP_COMMAND, 0x28); 
	HAL_Delay(0x32); 
	Write(DISP_COMMAND, 0xC0); 
	Write(DISP_DATA, 0xB9); 
	Write(DISP_DATA, 0x00); 
	Write(DISP_COMMAND, 0xC3); 
	Write(DISP_DATA, 0x05); 
	Write(DISP_COMMAND, 0xC4); 
	Write(DISP_DATA, 0x07); 
	Write(DISP_COMMAND, 0xD0); 
	Write(DISP_DATA, 0x1D); 
	Write(DISP_COMMAND, 0xB5); 
	Write(DISP_DATA, 0x00); 
	Write(DISP_COMMAND, 0x39); 
	Write(DISP_COMMAND, 0x3A); 
	Write(DISP_DATA, 0x02); 
	Write(DISP_COMMAND, 0x36); 
	Write(DISP_DATA, 0x00); 
	Write(DISP_COMMAND, 0xB0); 
	Write(DISP_DATA, 0x9F); 
	Write(DISP_COMMAND, 0xB4); 
	Write(DISP_DATA, 0xA0); 
	Write(DISP_COMMAND, 0x30); 
	Write(DISP_DATA, 0x00); 
	Write(DISP_DATA, 0x00); 
	Write(DISP_DATA, 0x00); 
	Write(DISP_DATA, 0x77); 
	Write(DISP_COMMAND, 0x20);
	Write(DISP_COMMAND, 0x2A); 
	Write(DISP_DATA, 0x00); 
	Write(DISP_DATA, 0x00); 
	Write(DISP_DATA, 0x00); 
	Write(DISP_DATA, 0x7F);
	
	
	
	Write(DISP_COMMAND, 0x2B);
	Write(DISP_DATA, 0x00);
	Write(DISP_DATA, 0x00);
	Write(DISP_DATA, 0x00);
	Write(DISP_DATA, 0x9F);
	Write(DISP_COMMAND, 0x2A);
	Write(DISP_DATA, 0x00);
	Write(DISP_DATA, 0x00);
	Write(DISP_DATA, 0x00);
	Write(DISP_DATA, 0x4F);
	Write(DISP_COMMAND, 0x2B);
	Write(DISP_DATA, 0x00);
	Write(DISP_DATA, 0x00);
	Write(DISP_DATA, 0x00);
	Write(DISP_DATA, 0x78);
	Write(DISP_COMMAND, 0x29);

	
	
	
	
	
	
		
	
	

};

void Disp_Clr_Port( void )
{
		GPIOC->BSRR |= 0xFF0000;	
};

void Disp_Write( uint8_t pixel )
{

	Disp_Clr_Port();
	for( int i = 0; i < 8; i++)
	{
	
		if( pixel & (1 << i) )
			DISP_D(i, GPIO_BIT_SET);
		
		if(  i == 7 )
		{
			uint8_t dsfdsf = 0;
		};
		
	
	};
	
};
	

void Disp_DeInit( void )
{

	DISP_RESET_ON;
	DISP_CS_OFF;
	

};



void Write( uint8_t type, uint8_t data)
{

		if( type == DISP_DATA )
		{
			DISP_A0_ON;
		}
		else if( type == DISP_COMMAND )
		{
			DISP_A0_OFF;
		}
		
		Disp_Write( data );
};
		
void Disp_Brt( uint16_t brt )
{			 
		TIM3->CCR4 = brt;
};
	





/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


#ifdef  USE_DEMO



void write_dat(unsigned char dat)
{
		DISP_RD_ON;
		DISP_WR_OFF;
		DISP_CS_OFF;
		DISP_A0_ON;
		
		Disp_Write(dat);
		
		DISP_CS_OFF;
		DISP_WR_ON;
		__nop();
    DISP_A0_ON;
    DISP_CS_ON;	
};



void write_cmd(unsigned char cmd)
{
	DISP_RD_ON;
	DISP_WR_OFF;
  DISP_A0_OFF;
  Disp_Write( cmd );  
  DISP_CS_OFF;
	DISP_WR_ON;
	__nop();
	DISP_A0_ON; 		
	DISP_CS_ON;			
};

void Full_on(void)
{
	unsigned char i=0,j=0;

	write_cmd(0x2c);//write display data
	for (i=0;i<MAX_ROW;i++)
	{
		for (j=0;j<MAX_COL/3;j++)
			write_dat(0x00);
	}
};



void Clear(void)
{
	unsigned char i=0,j=0;

	write_cmd(0x2c);//write display data
	for (i=0;i<MAX_ROW;i++)
	{
		for (j=0;j<MAX_COL/3;j++)
			write_dat(0x00);
	}
};

void Horizontal_line(void)
{
	unsigned char i=0,j=0;

	write_cmd(0x2c);//write display data
	for (i=0;i<MAX_ROW/2;i++)
	{
		for (j=0;j<MAX_COL/3;j++)
			write_dat(0xff);
		for (j=0;j<MAX_COL/3;j++)
			write_dat(0x00);
	}
}



void Vertical_line(void)
{
	unsigned char i=0,j=0;

	write_cmd(0x2c);//write display data
	for (i=0;i<MAX_ROW;i++)
	{
		for (j=0;j<MAX_COL/6;j++)
		{
			write_dat(0xc3);
			write_dat(0x18);
		}
	}
}




void Show_Graph(unsigned char arr[][MAX_COL/8])
{
	unsigned char i=0,j=0,cnt=0;
	unsigned long tmp=0;

	write_cmd(0x2c);//write display data
	for (i=0;i<MAX_ROW;i++)
	{
		for (j=0;j<MAX_COL/8;j++)
		{
			tmp=arr[i][j]|tmp;
			tmp<<=8;
			cnt++;
			if (cnt==3)
			{
				TransferData(tmp);
				cnt=0;
				tmp=0;
			}
		}
	}
}


void Show_Line( unsigned char arr[] )
{
		uint8_t i = 0, j = 0, cnt = 0;
	
	
		write_cmd(0x2c);
		for(i = 0; i<64; i++)
		{
				
		}
};


void TransferData(unsigned long dat)
{
	unsigned char i=0,cnt=0,tmp1=0,tmp2=0;
	unsigned long tmp=0,tmp3=0x80000000;

	tmp=dat;

	for (i=0;i<24;i++)
	{
		if (tmp&tmp3)
			tmp1=0x03;
		else
			tmp1=0x00;
		tmp2=tmp1|tmp2;
		if (cnt<2)
			tmp2<<=3;
		cnt++;
		if (cnt==3)
		{
			write_dat(tmp2);
			cnt=0;
			tmp2=0;
		}
		tmp<<=1;	
	}
}

void put_pixel( uint8_t px, uint8_t py, uint8_t state)
{

		if( px > 0xF0 ||	py > 0x3C)
			return;
		
		uint8_t col_num = px / 8;
		uint8_t x_shift = 7 - (px % 8);
 		if( state )
			code_pic[py][col_num] |= (1 << x_shift);
		else
			code_pic[py][col_num] &= ~(1 << x_shift);
};


void pic_buf_clr( void )
{
	for(uint16_t i = 0; i < 0x780; i++)
		code_pic[i / 30][i % 30] = 0;
};



void draw_char( uint8_t char_x, uint8_t char_y, uint8_t simbol, uint8_t polarity)
{

		


};



void LCD_initial(void)
{
	DISP_RESET_ON;		//LCM_RESET=1;
  HAL_Delay(0x78);	// 	Delay_ms(120);
  DISP_RESET_OFF; 	//LCM_RESET=0;
  HAL_Delay(0xA);  	//Delay_ms(10);
  DISP_RESET_ON;  		//LCM_RESET=1;
  HAL_Delay(0x78);		//	Delay_ms(120);

    write_cmd(0xD7);		// Disable Auto Read
	write_dat(0x9F);
			
	write_cmd(0xE0);		// Enable OTP Read
	write_dat(0x00);		
	HAL_Delay(0xA);			//Delay_ms(10);
		
	write_cmd(0xE3);		// OTP Up-Load
	HAL_Delay(0x14);			//Delay_ms(20);
		
	write_cmd(0xE1);		// OTP Control Out

	write_cmd(0x11);		// Sleep Out

	write_cmd(0x28);		// Display OFF
	HAL_Delay(0x32);			//Delay_ms(50);	
		
	write_cmd(0xC0);		// Set Vop
	write_dat(0x9E);		// difference	democode(0x9E) vs datasheet(0xB9)
	write_dat(0x00);		// 

	write_cmd(0xC3);		// BIAS System
	write_dat(0x05);		// 

	write_cmd(0xC4);		// Booster Level
	write_dat(0x05);		
	
	write_cmd(0xD0);		// Enable Analog Circuit
	write_dat(0x1D);
			
	write_cmd(0xB5);		// N-Line Inversion
	write_dat(0x00);		//

	write_cmd(0x39);		// Display Mode

	write_cmd(0xF1);		// Frame Rate (Monochrome Mode) 
	write_dat(0x06);		// 
	write_dat(0x0B);		// 
	write_dat(0x0D);		//	
	write_dat(0x10);		//

	write_cmd(0x3A);		// Enable DDRAM Interface
	write_dat(0x02);

    	write_cmd(0x36);		// Display Control
	write_dat(0xC8);		//
                           
	write_cmd(0xB0);		// Display Duty
	write_dat(0x3F);		//
	
	write_cmd(0x20);		// Inverse Display

	write_cmd(0x37);		// Start Line
	write_dat(0x00);		//

	write_cmd(0xB1);		// First Output COM
	write_dat(0x00);		//

	write_cmd(0xB3);		// FOSC Divider
	write_dat(0x01);

	write_cmd(0x2A);		// Set Column Address
	write_dat(0x00);		// 
	write_dat(48);          	//		
	write_dat(0x00);		//
	write_dat(127);		    	//
			
	write_cmd(0x2B);		// Set Row Address
	write_dat(0x00);		// 
	write_dat(96);		    	//
	write_dat(0x00);		//	
	write_dat(159);		    	//
	
	write_cmd(0xC4);		// Booster Level
	write_dat(0x07);

	write_cmd(0x29);		// Display ON
	
	
}


unsigned char code_pic[MAX_ROW][MAX_COL/8]=
{

0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x34,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFC,0x00,0x0F,0xFF,0x00,0x03,0xFF,0x80,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFB,0x00,0x03,0xFE,0xC0,0x00,0xFF,0x60,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFD,0x00,0x01,0xFF,0x40,0x00,0x7F,0xA0,
0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFD,0x80,0x01,0xFF,0x60,0x00,0x7F,0xB0,
0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0x80,0x00,0xFF,0xA0,0x00,0x3F,0xD0,
0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0x80,0x00,0xFF,0xA0,0x00,0x3F,0xD0,
0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x7F,0xC0,0x00,0x1F,0xE0,
0x00,0x0F,0xFC,0x3F,0xE0,0xFF,0x86,0x1E,0x07,0xF8,0x7F,0x80,0x00,0x00,0x00,0x1F,0xF8,0x3F,0xF8,0x00,0x1F,0xFF,0xFF,0x40,0x00,0x7F,0xD0,0x00,0x1F,0xE8,
0x00,0x0F,0xFC,0x3F,0xE0,0xFF,0x86,0x1E,0x07,0xF8,0x7E,0x00,0x00,0x00,0x00,0x1F,0xF0,0x1F,0xF8,0x00,0x07,0xFF,0xFF,0x80,0x00,0x3F,0xE0,0x00,0x0F,0xF0,
0x00,0x07,0xFE,0x1F,0xC0,0x7F,0x0E,0x1E,0x03,0xF8,0x7C,0x00,0x00,0x00,0x00,0x1F,0xF0,0x1F,0xF8,0x00,0x03,0xFF,0xFF,0x80,0x00,0x3F,0xE0,0x00,0x0F,0xF0,
0x00,0x07,0xFE,0x1F,0xC0,0x7F,0x0E,0x1E,0x03,0xF8,0x7C,0x00,0x00,0x00,0x00,0x1F,0xE0,0x0F,0xF8,0x00,0x03,0xFF,0xFF,0xE0,0x00,0x7F,0xD0,0x00,0x1F,0xE8,
0x00,0x0F,0xFE,0x1F,0xC0,0x7F,0x0E,0x1E,0x01,0xF8,0x78,0x3F,0xFF,0xFF,0x0F,0xFF,0xE1,0x0F,0xF8,0x7F,0xC1,0xFF,0xFF,0xFF,0xFF,0xFF,0x8F,0xFF,0xFF,0xC7,
0xFF,0xFF,0xFF,0x1F,0xC4,0x7F,0x1E,0x1E,0x01,0xF8,0x78,0x7F,0xFF,0xFF,0x0F,0xFF,0xE1,0x0F,0xF8,0x7F,0xE1,0xFF,0xFF,0xFF,0xFF,0xFF,0x3F,0xFF,0xFF,0x9F,
0xFF,0xFF,0xFF,0x0F,0x84,0x3E,0x1E,0x1E,0x00,0xF8,0x78,0x7F,0xFF,0xFF,0x0F,0xFF,0xC1,0x07,0xF8,0x7F,0xE1,0xFF,0xFF,0xFF,0xFF,0xFE,0xFF,0xFF,0xFF,0x7F,
0xFF,0xFF,0xFF,0x0F,0x84,0x3E,0x1E,0x1E,0x10,0xF8,0x78,0x3F,0xFF,0xFF,0x0F,0xFF,0xC3,0x87,0xF8,0x7F,0xE1,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0x0F,0x84,0x3E,0x1E,0x1E,0x10,0x78,0x78,0x0F,0xFF,0xFF,0x0F,0xFF,0xC3,0x87,0xF8,0x7F,0xC1,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0x8F,0x8E,0x3E,0x3E,0x1E,0x18,0x78,0x7C,0x01,0xFF,0xFF,0x0F,0xFF,0x87,0xC3,0xF8,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0x87,0x0E,0x1C,0x3E,0x1E,0x18,0x38,0x7E,0x00,0x3F,0xFF,0x0F,0xFF,0x87,0xC3,0xF8,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0x87,0x0E,0x1C,0x3E,0x1E,0x1C,0x38,0x7F,0x00,0x0F,0xFF,0x0F,0xFF,0x07,0xC1,0xF8,0x00,0x0F,0xFF,0xFF,0xFE,0x00,0x07,0xFF,0x80,0x01,0xFF,
0xFF,0xFF,0xFF,0x87,0x1F,0x1C,0x3E,0x1E,0x1C,0x18,0x7F,0xC0,0x07,0xFF,0x0F,0xFF,0x0F,0xE1,0xF8,0x00,0x3F,0xFF,0xFF,0xFD,0xFF,0xFB,0xFF,0x7F,0xFE,0xFF,
0xFF,0xFF,0xFF,0xC7,0x1F,0x1C,0x7E,0x1E,0x1E,0x18,0x7F,0xF8,0x07,0xFF,0x0F,0xFF,0x0F,0xE1,0xF8,0x78,0x1F,0xFF,0xFF,0xFD,0x80,0x01,0xFF,0x60,0x00,0x7F,
0xFF,0xFF,0xFF,0xC2,0x1F,0x08,0x7E,0x1E,0x1E,0x08,0x7F,0xFF,0x03,0xFF,0x0F,0xFE,0x00,0x00,0xF8,0x7E,0x0F,0xFF,0xFF,0xFC,0x80,0x01,0xFF,0x20,0x00,0x7F,
0xFF,0xFF,0xFF,0xC2,0x1F,0x08,0x7E,0x1E,0x1F,0x08,0x7F,0xFF,0xC3,0xFF,0x0F,0xFE,0x00,0x00,0xF8,0x7F,0x07,0xFF,0xFF,0xFE,0x80,0x00,0xFF,0xA0,0x00,0x3F,
0xFF,0xFF,0xFF,0xE2,0x3F,0x88,0xFE,0x1E,0x1F,0x00,0x70,0xFF,0xC3,0xFF,0x0F,0xFC,0x00,0x00,0x78,0x7F,0x07,0xFF,0xFF,0xFE,0xC0,0x00,0xFF,0xB0,0x00,0x3F,
0xFF,0xFF,0xFF,0xE2,0x3F,0x88,0xFE,0x1E,0x1F,0x80,0x70,0x7F,0xC3,0xFF,0x0F,0xFC,0x00,0x00,0x78,0x7F,0x83,0xFF,0xFF,0xFF,0x40,0x00,0x7F,0xD0,0x00,0x1F,
0xFF,0xFF,0xFF,0xE0,0x3F,0x80,0xFE,0x1E,0x1F,0x80,0x78,0x3F,0x83,0xFF,0x0F,0xFC,0x3F,0xF8,0x78,0x7F,0xC3,0xFF,0xFF,0xFF,0x40,0x00,0x7F,0xD0,0x00,0x1F,
0xFF,0xFF,0xFF,0xE0,0x3F,0x80,0xFE,0x1E,0x1F,0xC0,0x78,0x00,0x07,0xFF,0x0F,0xF8,0x3F,0xF8,0x38,0x7F,0xC1,0xFF,0xFF,0xFF,0x80,0x00,0x3F,0xE0,0x00,0x0F,
0xFF,0xFF,0xFF,0xF0,0x7F,0xC1,0xFE,0x1E,0x1F,0xC0,0x7C,0x00,0x07,0xFF,0x0F,0xF8,0x7F,0xFC,0x38,0x7F,0xE0,0xFF,0xFF,0xFF,0xA0,0x00,0x3F,0xE8,0x00,0x0F,
0xFF,0xFF,0xFF,0xF0,0x7F,0xC1,0xFE,0x1E,0x1F,0xE0,0x7E,0x00,0x0F,0xFF,0x0F,0xF8,0x7F,0xFC,0x38,0x7F,0xE0,0xFF,0xFF,0xFF,0xC0,0x00,0x1F,0xF0,0x00,0x07,
0xFF,0xFF,0xFF,0xF0,0x7F,0xC1,0xFE,0x1E,0x1F,0xE0,0x7F,0x80,0x3F,0xFF,0x0F,0xF0,0xFF,0xFE,0x18,0x7F,0xF0,0x7F,0xFF,0xFF,0xC0,0x00,0x1F,0xF0,0x00,0x07,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x3F,0xFC,0x00,0x0F,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x02
};



















#endif				//USE_DEMO








/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



/* USER CODE END 4 */

#ifdef USE_FULL_ASSERT

/**
   * @brief Reports the name of the source file and the source line number
   * where the assert_param error has occurred.
   * @param file: pointer to the source file name
   * @param line: assert_param error line source number
   * @retval None
   */
void assert_failed(uint8_t* file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
    ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */

}

#endif

/**
  * @}
  */ 

/**
  * @}
*/ 

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
