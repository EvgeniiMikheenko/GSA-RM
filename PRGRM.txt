/**
* \file
*
* \brief Empty user application template
*
*/

/**
* \mainpage User Application template doxygen documentation
*
* \par Empty user application template
*
* Bare minimum empty user application template
*
* \par Content
*
* -# Include the ASF header files (through asf.h)
* -# "Insert system clock initialization code here" comment
* -# Minimal main function that starts with a call to board_init()
* -# "Insert application code here" comment
*
*/

/*
* Include header files for all drivers that have been imported from
* Atmel Software Framework (ASF).
*/
/*
* Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
*/

#include <avr/interrupt.h>
#include <avr/io.h>
#include <delay.h>
#include <math.h>
#include <avr/cpufunc.h>
#include <string.h>
#include <RingBuffer.h>
#include <stdbool.h>
#include <stdlib.h>




#define AREF 4
#define length 16


#define pwm_min 0xB0
#define pwm_max 0xCF
#define pwm_step 0x014

#define boudrate  115200
#define oscfreq		20000000

#define ringbuffsize		128
#define windowsize		5


#define FILTER_DEGREE		5
#define An			30
#define Bn			((1 << FILTER_DEGREE)-An) 

#ifdef DEBUG
#define DEBUG_PRINT( str ) debug_print_str(str , strlen(str));
#else
#define DEBUG_PRINT( str )
#endif


void set_level(int val);
void adc_init( uint8_t channel );
void pwm_init( uint8_t tim1_val );
void overload( void );
void timer1_init( void );
void uart_init( void );
void debug_print( uint16_t data );
void debug_print_str( const char *lpStr, int strLen );
uint16_t filter(uint16_t x);
void set_dac_uf(uint16_t val);
void adc_select_channel( void );
uint16_t median_filter( void );
void put_medwindow( uint16_t );
int comp(const void *, const void *);




volatile uint16_t adc_data[length];
volatile uint16_t counter = 0;
volatile int flag = 0;
uint8_t pwm = pwm_min;
uint8_t txflag = 0;
uint8_t txbuf[2];
uint8_t adc_select = 0;
uint8_t adc_select_flag;
uint16_t ref_divider;
uint8_t timer_counter=0;

uint16_t medwindow[windowsize]; 
uint16_t step;

volatile uint16_t yn;
volatile uint16_t xn;

       RingBuffer_t Buffer;
       uint8_t      BufferData[ringbuffsize];


static bool isInit = false;
	
	
int main (void)
{
	/* Insert system clock initialization code here (sysclk_init()). */
	
 	RingBuffer_InitBuffer(&Buffer, BufferData, sizeof(BufferData));
 	uart_init();
// 	DEBUG_PRINT("----------------\n\r");
// 	DEBUG_PRINT("A = ");
// 	debug_print( An );
// 	DEBUG_PRINT("B = ");
// 	debug_print( Bn );
// 	DEBUG_PRINT("n = ");
// 	debug_print( FILTER_DEGREE );
// 	DEBUG_PRINT("\r\n----------------\n\r");

	cli();
	//	DEBUG_PRINT("App start\n");
	//board_init();
	//DDRB |= 0x10;

	PORTD = 0;//(1 << 6) ;
	PORTD |= (1 << 2);
	
	DDRC |= 0xFF;
	DDRB |= (1 << 1)|(1 << 3)|(1 << 0);
	
	DDRD |= (1 << 6)|(1 << 1);
	PORTC = 0xE7;
	set_dac_uf(0xFFF);
	adc_init(0x05);	
	
	ADCSRA |= (1 << ADSC);
	delay_ms(100);
	uint16_t b1 = ADCL;
	uint16_t b2 = ADCH & 0x03;
	
	ref_divider = (b2 << 8) + b1;
	
			//debug_print( ref_divider );
			//DEBUG_PRINT("\n\r");
	adc_init(0x06);

	
	
	sei();

	//DEBUG_PRINT("Port init complete\n");
	     
	//cli();


	//adc_select_channel();
	pwm_init(pwm);
	timer1_init();


	isInit = true;
	while(1)
	{
		
		
		// ADCSRA |= 0x40;

		if(flag > 50)
		{
			cli();
			
			PORTC |= (1 << 6);
			
			if(pwm >= pwm_max)
			{
				pwm = pwm_min;
				PORTC |= (1 << 5);
				delay_s(1);
				PORTC &= ~(1 << 5);
			};
			
			
			pwm_init( pwm );
			PORTC &= ~(1 << 6);
			pwm += pwm_step;




			
			flag=0;
			
			
			sei();
		}



	};




}

void set_level( int val)
{

	if( val > 1000 )
	{
		//overload();
		val = 1000;
	};

	if ( val < 50 )
	{
		val = 50;
	};

	
	int num = ((val+25)/50)-1;

	
	PORTC = 0xE0 + num;




};


void adc_init( uint8_t channel )
{
	ADMUX = channel;
	ADCSRA = 0xCF; //0xEF
	// ADCSRB = 0x03;
	sei();
}




ISR(ADC_vect, ISR_NOBLOCK)
{
cli();
	uint16_t buf1 = ADCL;
	uint16_t buf2 = ADCH & 0x03;
	
	uint16_t adc_data;
	uint16_t adc_filtered_data;
	uint16_t median_adc_data;
	float value1 = 0;
	float value;

#define COUNTER_MAX		40	

	counter > 0xFFFD? counter = 0: counter++;
	
	ADMUX = 0x06;
		DEBUG_PRINT("#");
		debug_print(counter);
		adc_data = (buf2 << 8) + buf1;
		debug_print(adc_data);
		put_medwindow(adc_data);		
		median_adc_data = median_filter();
		yn = filter( median_adc_data );
		debug_print(yn);
		DEBUG_PRINT("&");
		value1 = 10.2*1.2*yn*AREF/1024/3/ref_divider;
		value  = (0.00801082*pow(value1,3)-0.04380673*pow(value1,2)+0.16493025*value1-0.16116721)*1000;
		set_level(value);
sei();
}



void overload( void )
{
	SREG &= 0x7F;
	for(int i = 0; i < 1; i++)
	{
		PORTC = 0x60; // blue + buzzer on
		delay_ms(200);
		PORTC = 0xC0; // red on
		delay_ms(200);
	};
	sei();

};



void pwm_init( uint8_t tim1_val  )
{

	DDRD |= (1 << 7)|(1 << 4)|(1 << 3)|(1 << 5); //set PD7 as output
	PORTD |= (1 << 3); //enable DD2 driver


	TCCR1A |= (1<<WGM20)|(1<<WGM21); //select Fast PWM mode
	TCCR1A |= (1 << COM1A1)|(1 << COM1B1); //clear OC2 on compare match

	TCCR1B = (1<<CS11) | (1<<CS10); //Clock Prescaler is 1024


	OCR1AH = 0x00;
	OCR1AL = 0x00;

	OCR1BH = 0x00;
	OCR1BL = 0x00; // Set Dutycycle





	TCCR2A |= (1<<WGM20)|(1<<WGM21); //select Fast PWM mode XS5
	TCCR2A |= (1 << COM2A1); //clear OC2 on compare match XS5

	TCCR2B |=(1<<CS20); //Clock Prescaler is 1 XS5


	OCR2A = tim1_val; // Set Dutycycle XS5


}



void timer1_init( void )
{

	TIMSK0=(1<<TOIE0);
	// set timer0 counter initial value to 0
	TCNT0=0x00;
	// start timer0 with /256 prescaler
	TCCR0B = (1 << CS02)|(1 << CS00);


	// OCR0B = 0xFF;
	

	
}


ISR(TIMER0_OVF_vect) {
	// XOR PORTA with 0x01 to toggle the second bit up
	//PORTB=PORTB ^ 0x10;


	//start conversion ADC
	


	
	
	timer_counter++;
	
	if(timer_counter == 10)
	{
		ADCSRA |= (1 << ADSC);
		timer_counter = 0;
	}

	
	step++;
	
	if(!(PIND & 4))
	{
		flag++;

	}



	



}

void uart_init( void )
{
	UCSR0A = 0x02;
	UCSR0B = 0x18;
	UCSR0C = 0x06;
	
	//UCSR0B |= (1 << 6);		//TX Complete Interrupt Enable
	
	
// 	uint16_t boud = oscfreq/boudrate/(((UCSR0A&0x02)+1)*8) - 1;
// 	
// 	UBRR0L = boud & 0xFF;		// ?115200
// 	UBRR0H = (boud << 8) & 0x0F;
// 	
	
	UBRR0L = 0x15;
	UBRR0H = 0x00;
	
	
};

ISR(USART0_TX_vect)
{

	uint16_t BufferCount = RingBuffer_GetCount(&Buffer);
	if(BufferCount == 0)
	{
		UDR0 = 0x00;
		UCSR0B &= ~(1 << 6);
	}
	else
	{
		UDR0 = RingBuffer_Remove( &Buffer );
		
	}


};

void debug_print( uint16_t data )
{
	char buf[8];
	int len = sprintf(buf, "%d", data);
	buf[len++] = '\r';
	buf[len++] = '\n';
	debug_print_str( (const char*)buf, len );
}

void debug_print_str( const char *lpStr, int strLen )
{
	uint16_t BufferCount;
	cli();
	
	for (register int i = 0; i < strLen; i++)
	{
		BufferCount = RingBuffer_GetCount( &Buffer );
		if( BufferCount >= ringbuffsize )
			break;
		
		RingBuffer_Insert( &Buffer, (const uint8_t)*(lpStr++) );
	}
	
	if(	(UCSR0B & (1 << 6)) == 0)
	{
		UCSR0B |= (1 << 6);
		UDR0 = RingBuffer_Remove( &Buffer );
	}
	
	sei();
}



uint16_t filter(uint16_t x)
{
	static uint16_t y = 0;
	
	if( !isInit )
		y = 0;
		
// 	if( counter <= COUNTER_MAX ) {
// 		DEBUG_PRINT("y = ");
// 		debug_print( y );
// 	}
	
	uint16_t a = (uint16_t)(y * An);
	uint16_t b = (uint16_t)(x * Bn);
	
// 	if( counter <= 10 ) {
// 		DEBUG_PRINT("a = ");
// 		debug_print( a );
// 		DEBUG_PRINT("b = ");
// 		debug_print( b );
// 	}
	
	y = (uint16_t)(((uint16_t)(a + b)) >> FILTER_DEGREE);
	
	return y;
	
}


void set_dac_uf(uint16_t val)
{
	
	PORTB &= ~(1 << 0);
	
	for(int i =0; i < 16; i++)
	{
		PORTB |= (1 << 1);
		if(val & (0x8000 >> i)){
			PORTB |= (1 << 3);}
		else{
			PORTB &= ~(1 << 3);}
		PORTB &= ~(1 << 1);
		
	}
	
	PORTB |= (1 << 0);
}




void adc_select_channel( void )
{
	
	ADMUX = 0x05;
	
	//set_dac_uf(0x00+adc_select*0x7FF);
	//adc_select>2? adc_select = 0: adc_select++;
	adc_select_flag++;
	

	
	
	

}




uint16_t median_filter( void )
{

	uint16_t temp[windowsize];
	uint8_t tmpv;
	
	for(int i = 0; i < windowsize; i++)
	{
		temp[i] = medwindow[i];
	}
	
	qsort(temp, windowsize, sizeof(uint16_t), comp);
	
	
	
//	tmpv = windowsize%2;
	
	return temp[1+((windowsize-(windowsize%2))/2)];
	
}

void put_medwindow( uint16_t data)
 {
 	
 	medwindow[step%windowsize] = data;
 	step > 65499? step = 0: step ++;
 	
}



int comp(const void *i, const void *j)
{
 	return *(int *)i - *(int *)j;
}









































/**
* \file
*
* \brief Empty user application template
*
*/

/**
* \mainpage User Application template doxygen documentation
*
* \par Empty user application template
*
* Bare minimum empty user application template
*
* \par Content
*
* -# Include the ASF header files (through asf.h)
* -# "Insert system clock initialization code here" comment
* -# Minimal main function that starts with a call to board_init()
* -# "Insert application code here" comment
*
*/

/*
* Include header files for all drivers that have been imported from
* Atmel Software Framework (ASF).
*/
/*
* Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
*/

#include <avr/interrupt.h>
#include <avr/io.h>
#include <delay.h>
#include <math.h>
#include <avr/cpufunc.h>
#include <string.h>
#include <RingBuffer.h>
#include <stdbool.h>
#include <stdlib.h>
#include <crc16.h>
#include <avr/eeprom.h>
#include <util/crc16.h>
#include <stdio.h>



#define AREF 4
#define length 16


#define pwm_min 0x02
#define pwm_max 0xFA
#define pwm_step 0x19

#define boudrate  115200
#define oscfreq		20000000

#define ringbuffsize		256
#define windowsize		9




#define FILTER_DEGREE		5
#define FILTER_DIVIDER		256
#define An			250
#define Bn			(FILTER_DIVIDER - An)



#define	SHOW_TIME_COUNTER		30



#define resempling_degree	5

#define	RX_BUF_SIZE		36



#define GDU		11
#define DEFAULT_VAL		0
#define SIP			22


#ifdef DEBUG
#define DEBUG_PRINT( str ) debug_print_str(str , strlen(str));
#else
#define DEBUG_PRINT( str )
#endif


void set_level(double val);
void adc_init( uint8_t channel );
void pwm_init( uint8_t tim1_val );
void overload( void );
void timer1_init( void );
void uart_init( void );
void debug_print( uint16_t data );
void debug_print_str( const char *lpStr, int strLen );
void debug_print_u16buf( uint16_t* src, uint8_t size );
float filter(uint16_t x);
void set_dac_uf(uint16_t val);
void adc_select_channel( void );
uint16_t median_filter( void );
void put_medwindow( uint16_t );
int comp(const void *, const void *);
bool read_params( void );
void write_default( void );
void rx_parse( void );

bool read_eeprom( void );
void write_params( uint8_t mode );





uint16_t adc_data;
volatile uint16_t counter = 0;
volatile int flag = 0;
uint8_t pwm = pwm_min;
uint8_t txflag = 0;
uint8_t txbuf[2];
uint8_t adc_select = 0;
uint8_t adc_select_flag;
uint16_t ref_divider;
uint8_t timer_counter=0;
float value1 = 0;
double value;
uint16_t medwindow[windowsize]; 
uint16_t step;
uint16_t median_adc_data;
uint32_t resempling;	
uint32_t resempling_val;
uint8_t	 resempling_flag;	
uint8_t rx_num;
char rx_data_buf[RX_BUF_SIZE];


#define EEPROM_DATABUF_SIZE		18
#define EEPROM_ADDR_SHIFT		64

uint8_t EEMEM databuf[EEPROM_DATABUF_SIZE];

#define POLYDEG		4
#define indexA		0
#define indexB		1
#define indexC		2
#define indexD		3

#define EE_COEF_ADDR		0

float Coef[POLYDEG];

#define kA	Coef[indexA]	
#define kB	Coef[indexB]	
#define kC	Coef[indexC]	
#define kD	Coef[indexD]	








volatile uint16_t yn;
volatile uint16_t xn;

       RingBuffer_t Buffer;
       uint8_t      BufferData[ringbuffsize];

uint8_t SHOW_TIME;

static bool isInit = false;


int main (void)
{
	/* Insert system clock initialization code here (sysclk_init()). */
	
	
	
	
	
	
 	RingBuffer_InitBuffer(&Buffer, BufferData, sizeof(BufferData));
 	uart_init();
	
	while(!read_eeprom()){};
	



	cli();
	
	DDRA |= (1 << 3);

	PORTD = 0;//(1 << 6) ;
	PORTD |= (1 << 2);
	
	DDRC |= 0xFF;
	DDRB |= (1 << 1)|(1 << 3)|(1 << 0);
	
	DDRD |= (1 << 6)|(1 << 1);
	PORTC = 0xE7;
	set_dac_uf(0xFFF);
	adc_init(0x05);	
	
	ADCSRA |= (1 << ADSC);
	delay_ms(100);
	uint16_t b1 = ADCL;
	uint16_t b2 = ADCH & 0x03;
	
	ref_divider = (b2 << 8) + b1;

	adc_init(0x06);

	
	
	sei();

	pwm_init(pwm);
	timer1_init();


	isInit = true;

	while(1)
	{

		if(flag > 400)						//Button PWM control
		{
			cli();
			
			PORTC |= (1 << 6);
			
			if(pwm >= pwm_max)
			{
				pwm = pwm_min;
				PORTC |= (1 << 5);
				delay_s(1);
				PORTC &= ~(1 << 5);
			};
			pwm_init( pwm );
			PORTC &= ~(1 << 6);
			pwm += pwm_step;
			flag=0;
			sei();
		}
		if(resempling_flag)							// Data is collected, processing,  output 
		{
			cli();
			resempling_val = (resempling >> resempling_degree)>>5;
			resempling = 0;
			resempling_flag = 0;
			step = 0;
			value1 = resempling_val*4.1/1024;
			value = kA * pow(value1,3) + kB * pow(value1,2) + kC * value1 + kD;
			set_level(value);
			sei();
		}
	};
}

void set_level( double val)
{

	if( val > 1000 )			// Check borders
	{
		overload();
	};

	if ( val < 50 )
	{
		val = 50;
	};

	int num = (int)((val+25)/50)-1;
	PORTC = 0xE0 + num;			//Set val on port C
};


void adc_init( uint8_t channel )
{
	ADMUX = channel;	
	ADCSRA = 0xCF;		//Enable, Start conversion, interrupt enable, xtal/128
	sei();
}




ISR(ADC_vect, ISR_NOBLOCK)
{
cli();


	ADMUX = 0x06;		// FLOW channel
	uint16_t buf1 = ADCL;
	uint16_t buf2 = ADCH & 0x03;
	counter > 0xFFFD? counter = 0: counter++;	 // Global caunter
	
		step++;				//Resempling counter
		adc_data = (buf2 << 8) + buf1;
		resempling += adc_data;
		if(step == 1023)
		{
			resempling_flag = 1;
		}
		
sei();
}



void overload( void )		//FLOW >= 1000 CM3/MIN
{
	SREG &= 0x7F;			//==cli();
	for(int i = 0; i < 1; i++)
	{
		PORTC = 0x60; // blue + buzzer on
		delay_ms(200);
		PORTC = 0xC0; // red on
		delay_ms(200);
	};
	sei();
};



void pwm_init( uint8_t tim1_val  )
{
	DDRD |= (1 << 7)|(1 << 4)|(1 << 3)|(1 << 5); //set PD7 as output
	PORTD |= (1 << 3); //enable DD2 driver
	TCCR1A |= (1<<WGM20)|(1<<WGM21); //select Fast PWM mode
	TCCR1A |= (1 << COM1A1)|(1 << COM1B1); //clear OC2 on compare match
	TCCR1B =  (1<<CS10); //Clock Prescaler is 1024
	OCR1AH = tim1_val;
	OCR1AL = tim1_val;	
	OCR1BH = tim1_val;
	OCR1BL = tim1_val;
	TCCR2A |= (1<<WGM20)|(1<<WGM21); //select Fast PWM mode XS5
	TCCR2A |= (1 << COM2A1); //clear OC2 on compare match XS5
	TCCR2B |=(1<<CS20); //Clock Prescaler is 1 XS5
	OCR2A = tim1_val; // Set Dutycycle XS5
}



void timer1_init( void )
{

	TIMSK0=(1<<TOIE0);
	// set timer0 counter initial value to 0
	TCNT0=0x00;
	// start timer0 with /64 prescaler
	TCCR0B = (1 << CS01)|(1 << CS00);
}


ISR(TIMER0_OVF_vect) {
	timer_counter++;
	ADCSRA |= (1 << ADSC);

	if(!(PIND & 4))  //Button
	{
		flag++;

	}
}

void uart_init( void )
{
	UCSR0A = 0x02;
	UCSR0B = 0x98;   //Rx interrupt enable
	UCSR0C = 0x06;
	UBRR0L = 0x15;
	UBRR0H = 0x00;
};



ISR(USART0_RX_vect)
{
	
	int rx_data_byte;
	
	if(UCSR0A & (1 << 7))		// USART Receive Complete
	{
		rx_data_byte = UDR0;	
	};
	UDR0 = rx_data_byte;		// Send back to terminal
	
	if( rx_data_byte == 13)		// Carriage return
	{
		rx_data_buf[rx_num] = '\0';
		rx_parse();
		rx_data_buf[0] = '\0';
		rx_num = 0;	
	}
	else if(rx_data_byte == 127)	// Del (backspase)
	{
		rx_num--;
	}
	else
	{
		rx_data_buf[rx_num] = rx_data_byte;	
		
		if( rx_num < RX_BUF_SIZE )
			rx_num++;
		
	}
}





ISR(USART0_TX_vect)
{

	uint16_t BufferCount = RingBuffer_GetCount(&Buffer);
	if(BufferCount == 0)
	{
		UDR0 = 0x00;
		UCSR0B &= ~(1 << 6);		//TX Complete Interrupt Disable
	}
	else
	{
		UDR0 = RingBuffer_Remove( &Buffer );
	}
};

void debug_print( uint16_t data )
{
	char buf[8];
	int len = sprintf(buf, "%d", data);
	buf[len++] = '\r';
	buf[len++] = '\n';
	debug_print_str( (const char*)buf, len );
}

void debug_print_str( const char *lpStr, int strLen )
{
	uint16_t BufferCount;
	cli();
	
	for (register int i = 0; i < strLen; i++)
	{
		BufferCount = RingBuffer_GetCount( &Buffer );
		if( BufferCount >= ringbuffsize )
			break;
		
		RingBuffer_Insert( &Buffer, (const uint8_t)*(lpStr++) );
	}
	
	if(	(UCSR0B & (1 << 6)) == 0)
	{
		UCSR0B |= (1 << 6);
		UDR0 = RingBuffer_Remove( &Buffer );
	}
	
	sei();
}

void debug_print_u16buf( uint16_t* src, uint8_t size ) {
	if( (src == NULL) || ( size == 0 ) )
		return;
		
#define TMP_SIZE		70	

	char buf[TMP_SIZE];
	int index = 0;
	int len = 0;
	
	for( int i = 0; i < 2; i++ ){
		len = sprintf(&buf[index], "0x%04X", *src++);
		if( len <= 0 )
			break;
		
		index += len;
		buf[index++] = ' ';
		if( index >= TMP_SIZE )
			break;
	}
	
	if( ( index + 2 ) < TMP_SIZE ) {
		buf[index++] = '\r';
		buf[index++] = '\n';
	}
	debug_print_str( (const char*)buf, index );
}

float filter(uint16_t x)
{
	cli();
	static float y = 0;
	
	if( !isInit )
		y = 0;
		
	static float A = 0.99;
	static float B = 0.01;
		
// 	if( counter <= COUNTER_MAX ) {
// 		DEBUG_PRINT("y = ");
// 		debug_print( y );
// 	}
	
	float a = (float)(y * A);
	float b = (float)(x * B);
	
// 	if( counter <= 10 ) {
// 		DEBUG_PRINT("a = ");
// 		debug_print( a );
// 		DEBUG_PRINT("b = ");
// 		debug_print( b );
// 	}
	
	y = a + b;
	sei();
	return y;
	
}


void set_dac_uf(uint16_t val)
{
	
	PORTB &= ~(1 << 0);
	
	for(int i =0; i < 16; i++)
	{
		PORTB |= (1 << 1);
		if(val & (0x8000 >> i)){
			PORTB |= (1 << 3);}
		else{
			PORTB &= ~(1 << 3);}
		PORTB &= ~(1 << 1);
		
	}
	
	PORTB |= (1 << 0);
}




void adc_select_channel( void )
{
	
	ADMUX = 0x05;
	
	//set_dac_uf(0x00+adc_select*0x7FF);
	//adc_select>2? adc_select = 0: adc_select++;
	adc_select_flag++;
	

	
	
	

}



// 
// uint16_t median_filter( void )
// {
// 
// 	uint16_t temp[windowsize];
// 	uint8_t tmpv;
// 	
// 	for(int i = 0; i < windowsize; i++)
// 	{
// 		temp[i] = medwindow[i];
// 	}
// 	
// 	qsort(temp, windowsize, sizeof(uint16_t), comp);
// 	
// 	
// 	
// //	tmpv = windowsize%2;
// 	
// 	return temp[1+((windowsize-(windowsize%2))/2)];
// 	
// }
// 
// void put_medwindow( uint16_t data)
//  {
//  	
//  	medwindow[counter%windowsize] = data;
//  	//step > 65499? step = 0: step ++;
//  	
// }
// 
// 
// 
// int comp(const void *i, const void *j)
// {
//  	return *(int *)i - *(int *)j;
// }
// 


// 
// 
// bool read_params( void ) 
// {
// 	
// 	uint8_t tmp[ POLYDEG * sizeof(float) + 2 ];
// 	int size = sizeof(tmp);
// 	uint8_t eeAddr  = EE_COEF_ADDR;
// 	// Читаем из епрома в ptrDst
// 	
// 	DEBUG_PRINT("______");
// 	for(int i = 0; i < size; i++)
// 	{
// 		tmp[i] = eeprom_read_byte (&eeAddr);			//прочитать байт
// 		
// 		DEBUG_PRINT("====");
// 		debug_print((uint16_t)tmp);
// 		eeAddr++;
// 	
//     }
// 	DEBUG_PRINT("_____");
// 	
// 	
// 	
// 	
// 	
// 	
// 	if( !TestCrc16(tmp, size))
// 	{
// 		DEBUG_PRINT("CRC FALSE");
// 		write_default();
// 		return false;
// 
// 	}
// 	
// 	float *ptr = (float*)tmp;	
// 	uint16_t tsttmp;
// 	for(int i = 0; i < POLYDEG; i++)
// 	{
// 		Coef[i] = *ptr++;
// 		DEBUG_PRINT("SUCCESS");	
// 		
// 		//tsttmp = (uint16_t)(Coef[i]*1000);
// 		debug_print(i);
// 		DEBUG_PRINT("\n\r");
// 		//debug_print(tsttmp);
// 	}
// 	
// 	return true;
// }


// 
// 
// void write_default( void )
// {
// 
// 
// 	//test[4] = {1.5, 4.7, 2.9, 6.1};
// 	kA = 348.49;
// 	kB = -2168.1;
// 	kC = 4625.9;
// 	kD = -3154.9;
// 	
// 	uint8_t *ptr = 	( uint8_t * )Coef;		
// 	
// 	uint16_t StrAddr = EE_COEF_ADDR;
// 	uint16_t crc;
// 	crc = CalcCrc16(ptr, sizeof(Coef));
// 	
// 	uint16_t *ptr16 = ( uint16_t * )Coef;
// 
// 	for(int i = 0; i < (sizeof(Coef) / 2); i++)
// 	{
// 		
// 		//eeprom_write_word( (uint16_t*)StrAddr, *ptr16++ );
// 		__EEPUT(StrAddr, *ptr++);
// 		StrAddr += 2;
// 	}
// 	
// 	//eeprom_write_word( &StrAddr, crc);
// 	
// 	
// 	//sei();
// 	
// 	//while(1) { }
// 	
// }



bool read_eeprom( void )
{
	delay_s(2);
	cli();
	uint8_t tmpbuf[EEPROM_DATABUF_SIZE];
	eeprom_busy_wait();
	eeprom_read_block((void *)tmpbuf, (const void *)(databuf + EEPROM_ADDR_SHIFT), EEPROM_DATABUF_SIZE);
	
// 	for(uint16_t i =0; i < EEPROM_DATABUF_SIZE; i++)
// 	{
// 		//DEBUG_PRINT("\n\r^^\n\r");
// 		debug_print(tmpbuf[i]);
// 		DEBUG_PRINT("\n\r^^\n\r");
// 		if(i == EEPROM_DATABUF_SIZE -1)
// 		{
// 			DEBUG_PRINT("\n##\n");
// 		}
// 		
// 	}
	
	
	
	
	
	
	
	uint16_t crc = 0;
	for(int i =0; i < EEPROM_DATABUF_SIZE - 2; i++)
	{
		crc = _crc16_update( crc, tmpbuf[i]);
	}
	

		
		
// 		for( int i = 0; i < POLYDEG; i++ ) {
// 			float *ptrf = (float *)&tmpbuf[ i * (sizeof(float)) ];
// 			Coef[i] = *ptrf;
// 		}


				
		uint8_t bufss[4];
		for(int j = 0; j < EEPROM_DATABUF_SIZE - 2; j += 4)
		{
			for( int i = 0 ; i < 4; i++)
			{
				bufss[i] = tmpbuf[i+j];
			}
			float *ptrf = (float *)bufss;
			Coef[(int)j/4] = *ptrf;
		}
// 		
		
	if( crc == (((uint16_t)tmpbuf[EEPROM_DATABUF_SIZE-1] << 8) + (uint16_t)tmpbuf[EEPROM_DATABUF_SIZE-2]) )
	{		

// 		
// 		DEBUG_PRINT("\nwrite true\n");
// 		char tstdd[16];
// 		int len = sprintf(tstdd, "%f",Coef[0]);
// 		
// 		DEBUG_PRINT("\n---\n");
// 		debug_print(tmpbuf[0]);
// 		debug_print_str(tstdd, len);
// 		DEBUG_PRINT("\n---\n");
		DEBUG_PRINT("\ncrc ok\n");
		sei();
		return true;
		
	}
	else
	{
		DEBUG_PRINT("\n\rwrite params\n\r");
		write_params(GDU);
		
	}
	sei();
	return false;
	
	 
}


void write_params( uint8_t mode )
{ 
	cli();

	if(mode == GDU)
	{
		kA = 348.49;
		kB = -2168.1;
		kC = 4625.9;
		kD = -3154.9;
		
		
		DEBUG_PRINT("\n\rGDU def coef is set\n\r")
	}
	if(mode == SIP)
	{
		kA = 0;
		kB = 476.43;
		kC = -668.44;
		kD = 236.04;
		DEBUG_PRINT("\n\rSIP def coef is set\n\r")
	}
	
	if(mode == DEFAULT_VAL)
	{
		DEBUG_PRINT("\n\rcoef is set\n\r")
	}

			
	uint8_t *ptr8 = ( uint8_t * )Coef;
	eeprom_busy_wait();
	eeprom_update_block ((const uint8_t *)Coef, (void *)(databuf+EEPROM_ADDR_SHIFT), EEPROM_DATABUF_SIZE - 2);
	
	uint16_t crc = 0;
		for(int i =0; i < EEPROM_DATABUF_SIZE - 2; i++)
		{
			crc = _crc16_update( crc, *ptr8++);
		}
		eeprom_busy_wait();
		eeprom_write_word( (uint16_t *)(databuf+16+EEPROM_ADDR_SHIFT), crc);
	sei();
}



#define MAX_PARAMS	3
#define MAX_PARAMS_STR_LEN		16

static char data_str[MAX_PARAMS][MAX_PARAMS_STR_LEN];
static char trt[32];

void rx_parse( void )
{
	
	//uint8_t len = rx_num;
	
	

	uint8_t j = 0;
	uint8_t k = 0;
	uint8_t space_flag = 0;
	bool waitSplitter = false;
	for( int i = 0; i < rx_num; i++)
	{
		if(j >= MAX_PARAMS)
			break;
		
		//if(rx_data_buf[i] ==  ' ' && space_flag == 0)
		//{
			//data_str[j][k] = '\0';
			//j++;
			//k=0;
			//space_flag = 1;
		//}
		//else if(rx_data_buf[i] != ' ')
		//{
			//data_str[j][k++] = rx_data_buf[i];
			//space_flag = 0;
			//
		//}	
		
		if( (rx_data_buf[i] != ' ') && ( !waitSplitter ) ) {
			data_str[j][k++] = rx_data_buf[i];
			space_flag++;
			continue;
		} 	
		
		if( space_flag == 0 )
			continue;
		
		if( k >= MAX_PARAMS_STR_LEN ) {
			waitSplitter = true;
		}
			
		if( ( waitSplitter ) ) {
			if ( rx_data_buf[i] == ' ' ) {
				waitSplitter = false;
				k = MAX_PARAMS_STR_LEN - 1;
			}
			else
				continue;
		}
		
		data_str[j][k] = '\0';
		j++;
		k=0;
		space_flag = 0;		
	}
	
// 	if(j < 1)
// 	{
// 		DEBUG_PRINT("\n____\n");
// 		debug_print_str(data_str[0], len);
// 		DEBUG_PRINT("\n____\n");
// 		debug_print_str(data_str[1], len);
// 		DEBUG_PRINT("\n____\n");
// 		debug_print_str(data_str[2], len);
// 		DEBUG_PRINT("\n____\n");
// 		DEBUG_PRINT("\nno\n")
// 		return;
// 	}

	if( k != 0 ) {
		data_str[j][k] = '\0';
		j++;
	}

	
	if( strcmp(data_str[0], "set") == 0 && j == 3)
	{
				
		if( strcmp(data_str[1],"A") == 0)
		{
			kA  = (float)atof(data_str[2]);
			//sscanf(data_str[2],"%.5f",&kA);
			DEBUG_PRINT("\nis A\n\r");
			DEBUG_PRINT("\n\r");
		}
		else if( strcmp(data_str[1],"B") == 0)

		{
			kB  = (float)atof(data_str[2]);
			//sscanf(data_str[2],"%.5f",&kA);							
			DEBUG_PRINT("\nis B\n\r");
			DEBUG_PRINT("\n\r");
		}
		else if( strcmp(data_str[1],"C") == 0)
		{
			kC  = (float)atof(data_str[2]);
			//sscanf(data_str[2],"%.5f",&kA);				
			DEBUG_PRINT("\nis C\n\r");
			DEBUG_PRINT("\n\r");
		}
		else if( strcmp(data_str[1],"D") == 0)
		{
			kD  = (float)atof(data_str[2]);
			//sscanf(data_str[2],"%.5f",&kA);				
			DEBUG_PRINT("\nis D\n\r");
			DEBUG_PRINT("\n\r");
		}
		else if( strcmp(data_str[1], "default") == 0)
		{
			if( strcmp(data_str[2], "gdu") == 0)
			{
				write_params(GDU);
				DEBUG_PRINT("\n\ris default gdu\n\r");
			}

		}
		else if( strcmp(data_str[1], "default") == 0)
		{
			if( strcmp(data_str[2], "sip") == 0)
			{
				write_params(SIP);
				DEBUG_PRINT("\n\ris default sip\n\r");
			}

		}
		
		else
		{
			DEBUG_PRINT("\n\runknown coef\n\r");
		}



		
		
		
		
		
		
		
	}
	else if(strcmp(data_str[0], "read") == 0 && j == 2)
	{
		DEBUG_PRINT("\nis read\n");
		if(strcmp(data_str[1], "A") == 0)
		{
			int leng = sprintf(trt, "%.5F", kA);
			
			DEBUG_PRINT("\n\rA= ");
			debug_print_str(trt, leng);
			DEBUG_PRINT("\n\r");
			//DEBUG_PRINT("\nis A\n");
		}
		else if(strcmp(data_str[1], "B") == 0)
		{
			int leng = sprintf(trt, "%.5F", kB);
			
			DEBUG_PRINT("\n\rB= ");
			debug_print_str(trt, leng);
			DEBUG_PRINT("\n\r");
			//DEBUG_PRINT("\nis B");
		}
		else if(strcmp(data_str[1], "C") == 0)
		{
			int leng = sprintf(trt, "%.5F", kC);
			
			DEBUG_PRINT("\n\rC= ");
			debug_print_str(trt, leng);	
			DEBUG_PRINT("\n\r");		
			//DEBUG_PRINT("\nis C\n");
		}
		else if(strcmp(data_str[1], "D") == 0)
		{
			int leng = sprintf(trt, "%.5F", kD);
			
			DEBUG_PRINT("\n\rD= ");
			debug_print_str(trt, leng);
			DEBUG_PRINT("\n\r");			
			//DEBUG_PRINT("\nis D");
		}
		else 
		{
			DEBUG_PRINT("\n\runknown coef\n\r");
		}
		
		
		
		
		
		
	}
	else if(strcmp(data_str[0], "save") == 0 && j == 1)
	{
		write_params(DEFAULT_VAL);
		DEBUG_PRINT("\nsaved\n");
	}
	else
	{
		DEBUG_PRINT("\n\runknown param\n\r");
	}
}
	
	
	
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////












/**
* \file
*
* \brief Empty user application template
*
*/

/**
* \mainpage User Application template doxygen documentation
*
* \par Empty user application template
*
* Bare minimum empty user application template
*
* \par Content
*
* -# Include the ASF header files (through asf.h)
* -# "Insert system clock initialization code here" comment
* -# Minimal main function that starts with a call to board_init()
* -# "Insert application code here" comment
*
*/

/*
* Include header files for all drivers that have been imported from
* Atmel Software Framework (ASF).
*/
/*
* Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
*/

#include <avr/interrupt.h>
#include <avr/io.h>
#include <delay.h>
#include <math.h>
#include <avr/cpufunc.h>
#include <string.h>
#include <RingBuffer.h>
#include <stdbool.h>
#include <stdlib.h>
#include <crc16.h>
#include <avr/eeprom.h>
#include <util/crc16.h>
#include <stdio.h>



#define AREF 4
#define length 16


#define pwm_min 0x02
#define pwm_max 0xFA
#define pwm_step 0x19

#define boudrate  115200
#define oscfreq		20000000

#define ringbuffsize		256
#define windowsize		9




#define FILTER_DEGREE		5
#define FILTER_DIVIDER		256
#define An			250
#define Bn			(FILTER_DIVIDER - An)



#define	SHOW_TIME_COUNTER		30



#define resempling_degree	5

#define	RX_BUF_SIZE		36



#define GDU		11
#define DEFAULT_VAL		0
#define SIP			22


#ifdef DEBUG
#define DEBUG_PRINT( str ) debug_print_str(str , strlen(str));
#else
#define DEBUG_PRINT( str )
#endif


void set_level(double val);
void adc_init( uint8_t channel );
void pwm_init( uint8_t tim1_val );
void overload( void );
void timer1_init( void );
void uart_init( void );
void debug_print( uint16_t data );
void debug_print_str( const char *lpStr, int strLen );
void debug_print_u16buf( uint16_t* src, uint8_t size );
float filter(uint16_t x);
void set_dac_uf(uint16_t val);
void adc_select_channel( void );
uint16_t median_filter( void );
void put_medwindow( uint16_t );
int comp(const void *, const void *);
bool read_params( void );
void write_default( void );
void rx_parse( void );

bool read_eeprom( void );
void write_params( uint8_t mode );





uint16_t adc_data;
volatile uint16_t counter = 0;
volatile int flag = 0;
uint8_t pwm = pwm_min;
uint8_t txflag = 0;
uint8_t txbuf[2];
uint8_t adc_select = 0;
uint8_t adc_select_flag;
uint16_t ref_divider;
uint8_t timer_counter=0;
float value1 = 0;
double value;
uint16_t medwindow[windowsize]; 
uint16_t step;
uint16_t median_adc_data;
uint32_t resempling;	
uint32_t resempling_val;
uint8_t	 resempling_flag;	
uint8_t rx_num;
char rx_data_buf[RX_BUF_SIZE];


#define EEPROM_DATABUF_SIZE		18
#define EEPROM_ADDR_SHIFT		64

uint8_t EEMEM databuf[EEPROM_DATABUF_SIZE];

#define POLYDEG		4
#define indexA		0
#define indexB		1
#define indexC		2
#define indexD		3

#define EE_COEF_ADDR		0

float Coef[POLYDEG];

#define kA	Coef[indexA]	
#define kB	Coef[indexB]	
#define kC	Coef[indexC]	
#define kD	Coef[indexD]	








volatile uint16_t yn;
volatile uint16_t xn;

       RingBuffer_t Buffer;
       uint8_t      BufferData[ringbuffsize];

uint8_t SHOW_TIME;

static bool isInit = false;


int main (void)
{
	/* Insert system clock initialization code here (sysclk_init()). */
	
	
	
	
	
	
 	RingBuffer_InitBuffer(&Buffer, BufferData, sizeof(BufferData));
 	uart_init();
	
	while(!read_eeprom()){};
	



	cli();
	
	DDRA |= (1 << 3);

	PORTD = 0;//(1 << 6) ;
	PORTD |= (1 << 2);
	
	DDRC |= 0xFF;
	DDRB |= (1 << 1)|(1 << 3)|(1 << 0);
	
	DDRD |= (1 << 6)|(1 << 1);
	PORTC = 0xE7;
	set_dac_uf(0xFFF);
	adc_init(0x05);	
	
	ADCSRA |= (1 << ADSC);
	delay_ms(100);
	uint16_t b1 = ADCL;
	uint16_t b2 = ADCH & 0x03;
	
	ref_divider = (b2 << 8) + b1;

	adc_init(0x06);

	
	
	sei();

	pwm_init(pwm);
	timer1_init();


	isInit = true;

	while(1)
	{

		if(flag > 400)						//Button PWM control
		{
			cli();
			
			PORTC |= (1 << 6);
			
			if(pwm >= pwm_max)
			{
				pwm = pwm_min;
				PORTC |= (1 << 5);
				delay_s(1);
				PORTC &= ~(1 << 5);
			};
			pwm_init( pwm );
			PORTC &= ~(1 << 6);
			pwm += pwm_step;
			flag=0;
			sei();
		}
		if(resempling_flag)							// Data is collected, processing,  output 
		{
			cli();
			resempling_val = (resempling >> resempling_degree)>>5;
			resempling = 0;
			resempling_flag = 0;
			step = 0;
			value1 = resempling_val*4.1/1024;
			value = kA * pow(value1,3) + kB * pow(value1,2) + kC * value1 + kD;
			set_level(value);
			sei();
		}
	};
}

void set_level( double val)
{

	if( val > 1000 )			// Check borders
	{
		overload();
	};

	if ( val < 50 )
	{
		val = 50;
	};

	int num = (int)((val+25)/50)-1;
	PORTC = 0xE0 + num;			//Set val on port C
};


void adc_init( uint8_t channel )
{
	ADMUX = channel;	
	ADCSRA = 0xCF;		//Enable, Start conversion, interrupt enable, xtal/128
	sei();
}




ISR(ADC_vect, ISR_NOBLOCK)
{
cli();


	ADMUX = 0x06;		// FLOW channel
	uint16_t buf1 = ADCL;
	uint16_t buf2 = ADCH & 0x03;
	counter > 0xFFFD? counter = 0: counter++;	 // Global caunter
	
		step++;				//Resempling counter
		adc_data = (buf2 << 8) + buf1;
		resempling += adc_data;
		if(step == 1023)
		{
			resempling_flag = 1;
		}
		
sei();
}



void overload( void )		//FLOW >= 1000 CM3/MIN
{
	SREG &= 0x7F;			//==cli();
	for(int i = 0; i < 1; i++)
	{
		PORTC = 0x60; // blue + buzzer on
		delay_ms(200);
		PORTC = 0xC0; // red on
		delay_ms(200);
	};
	sei();
};



void pwm_init( uint8_t tim1_val  )
{
	DDRD |= (1 << 7)|(1 << 4)|(1 << 3)|(1 << 5); //set PD7 as output
	PORTD |= (1 << 3); //enable DD2 driver
	TCCR1A |= (1<<WGM20)|(1<<WGM21); //select Fast PWM mode
	TCCR1A |= (1 << COM1A1)|(1 << COM1B1); //clear OC2 on compare match
	TCCR1B =  (1<<CS10); //Clock Prescaler is 1024
	OCR1AH = tim1_val;
	OCR1AL = tim1_val;	
	OCR1BH = tim1_val;
	OCR1BL = tim1_val;
	TCCR2A |= (1<<WGM20)|(1<<WGM21); //select Fast PWM mode XS5
	TCCR2A |= (1 << COM2A1); //clear OC2 on compare match XS5
	TCCR2B |=(1<<CS20); //Clock Prescaler is 1 XS5
	OCR2A = tim1_val; // Set Dutycycle XS5
}



void timer1_init( void )
{

	TIMSK0=(1<<TOIE0);
	// set timer0 counter initial value to 0
	TCNT0=0x00;
	// start timer0 with /64 prescaler
	TCCR0B = (1 << CS01)|(1 << CS00);
}


ISR(TIMER0_OVF_vect) {
	timer_counter++;
	ADCSRA |= (1 << ADSC);

	if(!(PIND & 4))  //Button
	{
		flag++;

	}
}

void uart_init( void )
{
	UCSR0A = 0x02;
	UCSR0B = 0x98;   //Rx interrupt enable
	UCSR0C = 0x06;
	UBRR0L = 0x15;
	UBRR0H = 0x00;
};



ISR(USART0_RX_vect)
{
	
	int rx_data_byte;
	
	if(UCSR0A & (1 << 7))		// USART Receive Complete
	{
		rx_data_byte = UDR0;
	};
	UDR0 = rx_data_byte;		// Send back to terminal
	
	if( rx_data_byte == 13)		// Carriage return
	{
		rx_data_buf[rx_num] = '\0';
		rx_parse();
		rx_data_buf[0] = '\0';
		rx_num = 0;	
	}
	else if(rx_data_byte == 127)	// Del (backspace)
	{
		rx_num--;
	}
	else
	{
		rx_data_buf[rx_num] = rx_data_byte;	
		
		if( rx_num < RX_BUF_SIZE )
			rx_num++;
		
	}
}





ISR(USART0_TX_vect)
{

	uint16_t BufferCount = RingBuffer_GetCount(&Buffer);
	if(BufferCount == 0)
	{
		UDR0 = 0x00;
		UCSR0B &= ~(1 << 6);		//TX Complete Interrupt Disable
	}
	else
	{
		UDR0 = RingBuffer_Remove( &Buffer );
	}
};

void debug_print( uint16_t data )
{
	char buf[8];
	int len = sprintf(buf, "%d", data);
	buf[len++] = '\r';
	buf[len++] = '\n';
	debug_print_str( (const char*)buf, len );
}

void debug_print_str( const char *lpStr, int strLen )
{
	uint16_t BufferCount;
	cli();
	
	for (register int i = 0; i < strLen; i++)
	{
		BufferCount = RingBuffer_GetCount( &Buffer );
		if( BufferCount >= ringbuffsize )
			break;
		
		RingBuffer_Insert( &Buffer, (const uint8_t)*(lpStr++) );
	}
	
	if(	(UCSR0B & (1 << 6)) == 0)
	{
		UCSR0B |= (1 << 6);
		UDR0 = RingBuffer_Remove( &Buffer );
	}
	
	sei();
}

void debug_print_u16buf( uint16_t* src, uint8_t size ) {
	if( (src == NULL) || ( size == 0 ) )
		return;
		
#define TMP_SIZE		70	

	char buf[TMP_SIZE];
	int index = 0;
	int len = 0;
	
	for( int i = 0; i < 2; i++ ){
		len = sprintf(&buf[index], "0x%04X", *src++);
		if( len <= 0 )
			break;
		
		index += len;
		buf[index++] = ' ';
		if( index >= TMP_SIZE )
			break;
	}
	
	if( ( index + 2 ) < TMP_SIZE ) {
		buf[index++] = '\r';
		buf[index++] = '\n';
	}
	debug_print_str( (const char*)buf, index );
}


void set_dac_uf(uint16_t val)		// Reduce flow sensor voltage supply
{
	
	PORTB &= ~(1 << 0);
	
	for(int i =0; i < 16; i++)
	{
		PORTB |= (1 << 1);
		if(val & (0x8000 >> i)){
			PORTB |= (1 << 3);}
		else{
			PORTB &= ~(1 << 3);}
		PORTB &= ~(1 << 1);
		
	}
	
	PORTB |= (1 << 0);
}


bool read_eeprom( void )
{
	delay_ms(200);
	cli();
	uint8_t tmpbuf[EEPROM_DATABUF_SIZE];
	eeprom_busy_wait();
	eeprom_read_block((void *)tmpbuf, (const void *)(databuf + EEPROM_ADDR_SHIFT), EEPROM_DATABUF_SIZE);		//Read 18 bits from *databuf + EEPROM_ADDR_SHIFT eeprom address

	uint16_t crc = 0;
	for(int i =0; i < EEPROM_DATABUF_SIZE - 2; i++)						//Crc calculation
	{
		crc = _crc16_update( crc, tmpbuf[i]);
	}

	uint8_t bufss[4];
	for(int j = 0; j < EEPROM_DATABUF_SIZE - 2; j += 4)				// Get float val from eeprom
	{
		for( int i = 0 ; i < 4; i++)
		{
			bufss[i] = tmpbuf[i+j];
		}
		float *ptrf = (float *)bufss;
		Coef[(int)j/4] = *ptrf;
	}					
// 		
		
	if( crc == (((uint16_t)tmpbuf[EEPROM_DATABUF_SIZE-1] << 8) + (uint16_t)tmpbuf[EEPROM_DATABUF_SIZE-2]) )		//Check read data and read crc
	{		
		DEBUG_PRINT("\ncrc ok\n");
		sei();
		return true;	
	}
	else														// Read data is incorrect
	{
		DEBUG_PRINT("\n\rwrite params\n\r");					//Write GDU coef 
		write_params(GDU);
		
	}
	sei();
	return false;
}


void write_params( uint8_t mode )			//Calculate crc and write params with crc to eeprom
{ 
	cli();

	if(mode == GDU)									
	{
		kA = 348.49;
		kB = -2168.1;
		kC = 4625.9;
		kD = -3154.9;
		
		
		DEBUG_PRINT("\n\rGDU def coef is set\n\r")
	}
	if(mode == SIP)
	{
		kA = 0;
		kB = 476.43;
		kC = -668.44;
		kD = 236.04;
		DEBUG_PRINT("\n\rSIP def coef is set\n\r")
	}
	
	if(mode == DEFAULT_VAL)
	{
		DEBUG_PRINT("\n\rcoef is set\n\r")
	}

			
	uint8_t *ptr8 = ( uint8_t * )Coef;
	eeprom_busy_wait();
	eeprom_update_block ((const uint8_t *)Coef, (void *)(databuf+EEPROM_ADDR_SHIFT), EEPROM_DATABUF_SIZE - 2);
	
	uint16_t crc = 0;
		for(int i =0; i < EEPROM_DATABUF_SIZE - 2; i++)
		{
			crc = _crc16_update( crc, *ptr8++);
		}
		eeprom_busy_wait();
		eeprom_write_word( (uint16_t *)(databuf+16+EEPROM_ADDR_SHIFT), crc);
	sei();
}



#define MAX_PARAMS	3
#define MAX_PARAMS_STR_LEN		16

static char data_str[MAX_PARAMS][MAX_PARAMS_STR_LEN];
static char trt[32];

void rx_parse( void )			//Parse message from terminal
{
	uint8_t j = 0;
	uint8_t k = 0;
	uint8_t space_flag = 0;
	bool waitSplitter = false;
	for( int i = 0; i < rx_num; i++)
	{
		if(j >= MAX_PARAMS)
			break;
		if( (rx_data_buf[i] != ' ') && ( !waitSplitter ) ) {
			data_str[j][k++] = rx_data_buf[i];
			space_flag++;
			continue;
		} 	
		
		if( space_flag == 0 )
			continue;
		
		if( k >= MAX_PARAMS_STR_LEN ) {
			waitSplitter = true;
		}
			
		if( ( waitSplitter ) ) {
			if ( rx_data_buf[i] == ' ' ) {
				waitSplitter = false;
				k = MAX_PARAMS_STR_LEN - 1;
			}
			else
				continue;
		}
		
		data_str[j][k] = '\0';
		j++;
		k=0;
		space_flag = 0;		
	}

	if( k != 0 ) {
		data_str[j][k] = '\0';
		j++;
	}

	
	if( strcmp(data_str[0], "set") == 0 && j == 3)
	{
				
		if( strcmp(data_str[1],"A") == 0)
		{
			kA  = (float)atof(data_str[2]);
			DEBUG_PRINT("\nis A\n\r");
			DEBUG_PRINT("\n\r");
		}
		else if( strcmp(data_str[1],"B") == 0)

		{
			kB  = (float)atof(data_str[2]);
			DEBUG_PRINT("\nis B\n\r");
			DEBUG_PRINT("\n\r");
		}
		else if( strcmp(data_str[1],"C") == 0)
		{
			kC  = (float)atof(data_str[2]);
			DEBUG_PRINT("\nis C\n\r");
			DEBUG_PRINT("\n\r");
		}
		else if( strcmp(data_str[1],"D") == 0)
		{
			kD  = (float)atof(data_str[2]);
			DEBUG_PRINT("\nis D\n\r");
			DEBUG_PRINT("\n\r");
		}
		else if( strcmp(data_str[1], "default") == 0)
		{
			if( strcmp(data_str[2], "gdu") == 0)
			{
				write_params(GDU);
				DEBUG_PRINT("\n\ris default gdu\n\r");
			}

		}
		else if( strcmp(data_str[1], "default") == 0)
		{
			if( strcmp(data_str[2], "sip") == 0)
			{
				write_params(SIP);
				DEBUG_PRINT("\n\ris default sip\n\r");
			}

		}
		
		else
		{
			DEBUG_PRINT("\n\runknown coef\n\r");
		}
	}
	else if(strcmp(data_str[0], "read") == 0 && j == 2)
	{
		DEBUG_PRINT("\nis read\n");
		if(strcmp(data_str[1], "A") == 0)
		{
			int leng = sprintf(trt, "%.5F", kA);
			
			DEBUG_PRINT("\n\rA= ");
			debug_print_str(trt, leng);
			DEBUG_PRINT("\n\r");
		}
		else if(strcmp(data_str[1], "B") == 0)
		{
			int leng = sprintf(trt, "%.5F", kB);
			
			DEBUG_PRINT("\n\rB= ");
			debug_print_str(trt, leng);
			DEBUG_PRINT("\n\r");
		}
		else if(strcmp(data_str[1], "C") == 0)
		{
			int leng = sprintf(trt, "%.5F", kC);
			
			DEBUG_PRINT("\n\rC= ");
			debug_print_str(trt, leng);	
			DEBUG_PRINT("\n\r");		
		}
		else if(strcmp(data_str[1], "D") == 0)
		{
			int leng = sprintf(trt, "%.5F", kD);
			
			DEBUG_PRINT("\n\rD= ");
			debug_print_str(trt, leng);
			DEBUG_PRINT("\n\r");			
		}
		else 
		{
			DEBUG_PRINT("\n\runknown coef\n\r");
		}
	}
	else if(strcmp(data_str[0], "save") == 0 && j == 1)
	{
		write_params(DEFAULT_VAL);
		DEBUG_PRINT("\nsaved\n");
	}
	else
	{
		DEBUG_PRINT("\n\runknown param\n\r");
	}
}
	
	
	
